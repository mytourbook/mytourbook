plugins {

   id 'com.github.dkorotych.gradle-maven-exec' version '2.2.1'
   id 'org.sonarqube' version '3.3'
   id 'jacoco'
}

// get MT version and remove quotes
def _mtVersionRaw                = project(':mytourbook').ext.myTourbookVersion      // '18.2.0'
def _mtVersion                   = _mtVersionRaw.replaceAll('\'', '')                // 18.2.0

def _dirProductBuilt             = file('../build.net.tourbook.product/target/products')
def _dirProductArchive           = file('../../../../mytourbook-PRODUCT/' + _mtVersion)
def _dirProductReleaseNotes      = file('../../info/release-notes')
def _pathProductArchive          = _dirProductArchive.absolutePath
                                 
def _dirWinInnoSetup             = file('../../INSTALL-UPDATES/installer-net.tourbook/win-Inno.Setup')
def _pathInnoSetupCompilerApp    = file('c:/Program Files (x86)/Inno Setup 6/iscc.exe').absolutePath


gradle.taskGraph.beforeTask { Task task ->

    // show a task indicator
   println '---------------------------------------------------------------------------------------'
   println ''
}

gradle.taskGraph.afterTask { Task task ->

    // show more space
   println ''
   println ''
}

defaultTasks 'mt_0_Build'

task mt_0_Build          
mt_0_Build.dependsOn( 

   'mt_10_CreateBuildFiles',
   'mt_20_BuildProduct',
   'mt_30_CopyProduct',
   'mt_40_ExtractWinFiles',
   'mt_50_CreateExeFiles',
   'mt_60_CleanupWinFiles',
   'mt_70_CopyReleaseNotes',
)

sonarqube {
  properties {
    property "sonar.projectKey",       "wolfgang-ch_mytourbook"
    property "sonar.organization",     "wolfgang-ch"
    property "sonar.host.url",         "https://sonarcloud.io"
    property "sonar.sources",          "bundles"
    property "sonar.exclusions",       "bundles/net.tourbook.chart/src/net/tourbook/chart/ChartComponentGraph.java,bundles/net.tourbook.ext.jars/**/*"
    property "sonar.java.binaries",    "."
    property 'sonar.coverage.jacoco.xmlReportPaths', '../../mytourbook-BUILD-autocreated/core/net.tourbook.tests/target/site/jacoco-aggregate/jacoco.xml'
  }
}

/*
* 1. Copy all MT files into a temp folder, it is using task/target 'create-build-files' from the Ant script
*/
task mt_10_CreateBuildFiles {

   // import Ant build, every target will be a task
   ant.importBuild 'CREATE_MT_BuildFiles.xml'

   dependsOn('create-build-files')
}


/*
* 2. Build product with maven/tycho
*/
task mt_20_BuildProduct {

   doLast {

      //run: mvn verify -P build-release

      def buildDir = file('../..')

      mavenexec {

         workingDir  buildDir
         goals       'clean', 'verify'
         
         // repos can be used offline when this option "offline true" is set, 
         // by default it is disabled 
//       offline     true

         options {
            activateProfiles   = ['build-release']
         }
      }
   }
}


/*
* Copy generated product file into product archive folder
*/
task mt_30_CopyProduct {

   doLast {

//    From:   C:\DAT\MT\mytourbook\build\build.net.tourbook
//    Into:   C:\DAT\MT\mytourbook\build\build.net.tourbook.product\target\products

      println '\tFrom ' + _dirProductBuilt       
      println '\tInto ' + _dirProductArchive

      // copy into archive folder
      copy {

         from (_dirProductBuilt) {
            include '*' + _mtVersion + '*'
         }

         into _dirProductArchive
      }
   }
}


/*
 Extract win archives in separate dirs that the exe files can be compiled
*/
task mt_40_ExtractWinFiles {

   doLast {

      println 'Extracting from ' + _dirProductArchive

      file(_dirProductArchive).eachFileMatch(~/.*win.*.zip/) { winZipFile->

         def winZipFileName = winZipFile.name
         def winZipName = winZipFileName.take(winZipFileName.lastIndexOf('.'))

         def outputDir = file(_pathProductArchive + '/' + winZipName)

         println '\t' + outputDir
         
         copy {
            from zipTree(winZipFile)
            into outputDir
         }
      }
   }
}


/*
 Create win exe files
*/
task mt_50_CreateExeFiles {
        
   doLast {
       
      println 'Creating Windows setup files'
      
      def winInnoSetupDirName = _dirWinInnoSetup.absolutePath
      
      def win64SetupConfigFilename = file(winInnoSetupDirName + '/mytourbook-core-64-create-setup_exe.iss').absolutePath
      
      exec {
      
         println '\twin 64'
      
         commandLine 'cmd', '/c', '"'+_pathInnoSetupCompilerApp+'"'
         args      win64SetupConfigFilename
      }
   }
}

/*
 Cleanup win zip files
*/
task mt_60_CleanupWinFiles {
        
   doLast {
       
      println 'Deleting extracted files from ' + _dirProductArchive
      
      def hiddenDir = file(_pathProductArchive + '/hidden')
      
      file(_dirProductArchive).eachFileMatch(~/.*win.*.zip/) { winZipFile->
         
         def winZipFileName = winZipFile.name
         def winZipName = winZipFileName.take(winZipFileName.lastIndexOf('.'))
         
         def outputDir = file(_pathProductArchive + '/' + winZipName)

         println '\tdelete\t\t' + outputDir
         
         // delete extracted files
         outputDir.deleteDir()
         
//         // move zip into hidden folder
//         hiddenDir.mkdirs()
//         def hiddenFile = file(hiddenDir.absolutePath + '/' + winZipFileName)
//         println '\tmove into\t' + hiddenFile 
//         
//         // delete old file when available
//         hiddenFile.delete()
//         
//         winZipFile.renameTo(hiddenFile)
      }
   }
}


/*
* Copy realease notes into product archive folder
*/
task mt_70_CopyReleaseNotes {

   doLast {

      def releaseNotesFilename = _mtVersion + '-readme.txt'
      
      def fileReleaseNotesFrom = file(_dirProductReleaseNotes.absolutePath + '/' + releaseNotesFilename)

      println '\tFrom ' + fileReleaseNotesFrom       
      println '\tInto ' + _dirProductArchive

      // copy into archive folder
      if (fileReleaseNotesFrom.exists()) {
      
         println "\tFile ${releaseNotesFilename} copied"

         copy {
            from fileReleaseNotesFrom
            into _dirProductArchive
         }
      } else {

         println "\tFile \"${fileReleaseNotesFrom}\" is not available"
      }
   }
}
